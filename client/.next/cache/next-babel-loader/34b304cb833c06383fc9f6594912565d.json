{"ast":null,"code":"import _regeneratorRuntime from \"/Users/emmawv/practice/you-time/client/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/emmawv/practice/you-time/client/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/Users/emmawv/practice/you-time/client/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/emmawv/practice/you-time/client/pages/_app.js\",\n    _this = this;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/* eslint-disable react/prop-types */\n\n/* eslint-disable react/jsx-props-no-spreading */\nimport NProgress from 'nprogress';\nimport Router from 'next/router';\nimport Page from '../components/Page'; // import 'nprogress/nprogress.css'; Gives me automatic settings\n\nimport '../components/styles/nprogress.css'; // My own settings as a CSS file.\n// eslint-disable-next-line import/order\n\nimport { ApolloProvider } from '@apollo/client';\nimport withData from '../lib/withData';\nRouter.events.on('routeChangeStart', function () {\n  return NProgress.start();\n}); // When the routing starts the loader bar at top of page starts.\n\nRouter.events.on('routeChangeComplete', function () {\n  return NProgress.done();\n});\nRouter.events.on('routeChangeError', function () {\n  return NProgress.done();\n}); // If routing ends or there is an error it finishes.\n\nvar MyApp = function MyApp(_ref) {\n  var Component = _ref.Component,\n      pageProps = _ref.pageProps,\n      apollo = _ref.apollo;\n  console.log(apollo);\n  return (\n    /*#__PURE__*/\n    // To take the withData function and create an instance of Apollo to inject into our application we wrap the app in a provider (a component in React that usually lives very high in your application and allows components that are several levels deep to access the data). Anywhere in my app I can access the data from apollo client.\n    _jsxDEV(ApolloProvider, {\n      client: apollo,\n      children: /*#__PURE__*/_jsxDEV(Page, {\n        children: /*#__PURE__*/_jsxDEV(Component, _objectSpread({}, pageProps), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 9\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 7\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }, _this)\n  );\n}; // Tell Next to fetch all the queries in all the children components. If any of the pages have a getInitialProps method on them (they will as this is what withData is adding to them) we are going to wait and fetch it.\n\n\n_c = MyApp;\n\nMyApp.getInitialProps = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n    var Component, ctx, pageProps;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            Component = _ref2.Component, ctx = _ref2.ctx;\n            pageProps = {};\n\n            if (!Component.getInitialProps) {\n              _context.next = 6;\n              break;\n            }\n\n            _context.next = 5;\n            return Component.getInitialProps(ctx);\n\n          case 5:\n            pageProps = _context.sent;\n\n          case 6:\n            pageProps.query = ctx.query; // Will allow us to get any query variables.\n\n            return _context.abrupt(\"return\", {\n              pageProps: pageProps\n            });\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nexport default _c2 = withData(MyApp); // withData function will send apollo props to MyApp.\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MyApp\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/emmawv/practice/you-time/client/pages/_app.js"],"names":["NProgress","Router","Page","ApolloProvider","withData","events","on","start","done","MyApp","Component","pageProps","apollo","console","log","getInitialProps","ctx","query"],"mappings":";;;;;;;;;;;;AAAA;;AACA;AACA,OAAOA,SAAP,MAAsB,WAAtB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,IAAP,MAAiB,oBAAjB,C,CAEA;;AACA,OAAO,oCAAP,C,CAA6C;AAC7C;;AACA,SAASC,cAAT,QAA+B,gBAA/B;AACA,OAAOC,QAAP,MAAqB,iBAArB;AAEAH,MAAM,CAACI,MAAP,CAAcC,EAAd,CAAiB,kBAAjB,EAAqC;AAAA,SAAMN,SAAS,CAACO,KAAV,EAAN;AAAA,CAArC,E,CAA+D;;AAC/DN,MAAM,CAACI,MAAP,CAAcC,EAAd,CAAiB,qBAAjB,EAAwC;AAAA,SAAMN,SAAS,CAACQ,IAAV,EAAN;AAAA,CAAxC;AACAP,MAAM,CAACI,MAAP,CAAcC,EAAd,CAAiB,kBAAjB,EAAqC;AAAA,SAAMN,SAAS,CAACQ,IAAV,EAAN;AAAA,CAArC,E,CAA8D;;AAE9D,IAAMC,KAAK,GAAG,SAARA,KAAQ,OAAsC;AAAA,MAAnCC,SAAmC,QAAnCA,SAAmC;AAAA,MAAxBC,SAAwB,QAAxBA,SAAwB;AAAA,MAAbC,MAAa,QAAbA,MAAa;AAClDC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA;AAAA;AACE;AACA,YAAC,cAAD;AAAgB,MAAA,MAAM,EAAEA,MAAxB;AAAA,6BACE,QAAC,IAAD;AAAA,+BACE,QAAC,SAAD,oBAAeD,SAAf;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAFF;AAQD,CAVD,C,CAYA;;;KAZMF,K;;AAaNA,KAAK,CAACM,eAAN;AAAA,uEAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkBL,YAAAA,SAAlB,SAAkBA,SAAlB,EAA6BM,GAA7B,SAA6BA,GAA7B;AAClBL,YAAAA,SADkB,GACN,EADM;;AAAA,iBAElBD,SAAS,CAACK,eAFQ;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAGFL,SAAS,CAACK,eAAV,CAA0BC,GAA1B,CAHE;;AAAA;AAGpBL,YAAAA,SAHoB;;AAAA;AAKtBA,YAAAA,SAAS,CAACM,KAAV,GAAkBD,GAAG,CAACC,KAAtB,CALsB,CAKO;;AALP,6CAMf;AAAEN,cAAAA,SAAS,EAATA;AAAF,aANe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxB;;AAAA;AAAA;AAAA;AAAA;;AASA,qBAAeP,QAAQ,CAACK,KAAD,CAAvB,C,CAAgC","sourcesContent":["/* eslint-disable react/prop-types */\n/* eslint-disable react/jsx-props-no-spreading */\nimport NProgress from 'nprogress';\nimport Router from 'next/router';\nimport Page from '../components/Page';\n\n// import 'nprogress/nprogress.css'; Gives me automatic settings\nimport '../components/styles/nprogress.css'; // My own settings as a CSS file.\n// eslint-disable-next-line import/order\nimport { ApolloProvider } from '@apollo/client';\nimport withData from '../lib/withData';\n\nRouter.events.on('routeChangeStart', () => NProgress.start()); // When the routing starts the loader bar at top of page starts.\nRouter.events.on('routeChangeComplete', () => NProgress.done());\nRouter.events.on('routeChangeError', () => NProgress.done()); // If routing ends or there is an error it finishes.\n\nconst MyApp = ({ Component, pageProps, apollo }) => {\n  console.log(apollo);\n  return (\n    // To take the withData function and create an instance of Apollo to inject into our application we wrap the app in a provider (a component in React that usually lives very high in your application and allows components that are several levels deep to access the data). Anywhere in my app I can access the data from apollo client.\n    <ApolloProvider client={apollo}>\n      <Page>\n        <Component {...pageProps} />\n      </Page>\n    </ApolloProvider>\n  );\n};\n\n// Tell Next to fetch all the queries in all the children components. If any of the pages have a getInitialProps method on them (they will as this is what withData is adding to them) we are going to wait and fetch it.\nMyApp.getInitialProps = async function ({ Component, ctx }) {\n  let pageProps = {};\n  if (Component.getInitialProps) {\n    pageProps = await Component.getInitialProps(ctx);\n  }\n  pageProps.query = ctx.query; // Will allow us to get any query variables.\n  return { pageProps };\n};\n\nexport default withData(MyApp); // withData function will send apollo props to MyApp.\n"]},"metadata":{},"sourceType":"module"}