{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/emmawv/practice/you-time/client/components/Products.js\";\n\n/* eslint-disable react/jsx-props-no-spreading */\nimport { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport styled from 'styled-components';\nimport Product from './Product'; // QUERY:\n// gql imports graphql-tag that turns our string into a proper graphQL query.\n\nconst ALL_PRODUCTS_QUERY = gql`\n  query ALL_PRODUCTS_QUERY {\n    allProducts {\n      id\n      title\n      author\n      description\n      price\n      photo {\n        id\n        image {\n          publicUrlTransformed\n        }\n        altText\n      }\n    }\n  }\n`;\nconst ProductsListStyles = styled.div.withConfig({\n  displayName: \"Products__ProductsListStyles\",\n  componentId: \"sc-1uv5x8m-0\"\n})([\"display:grid;grid-gap:70px;text-align:center;grid-template-columns:repeat(auto-fit,minmax(150px,1fr));padding:100px 12%;\"]);\n\nconst Products = () => {\n  const {\n    data,\n    error,\n    loading\n  } = useQuery(ALL_PRODUCTS_QUERY); // useQuery returns data, errors and if it is currently loading so we destructure it.\n\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 23\n  }, this); // TODO: Change for loader.\n\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Error: \", error.message]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(ProductsListStyles, {\n      children: data.allProducts.map(elm => /*#__PURE__*/_jsxDEV(Product, {\n        product: elm\n      }, elm.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n\nexport default Products;","map":{"version":3,"sources":["/Users/emmawv/practice/you-time/client/components/Products.js"],"names":["useQuery","gql","styled","Product","ALL_PRODUCTS_QUERY","ProductsListStyles","div","Products","data","error","loading","message","allProducts","map","elm","id"],"mappings":";;;AAAA;AACA,SAASA,QAAT,QAAyB,gBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,OAAP,MAAoB,WAApB,C,CAEA;AACA;;AACA,MAAMC,kBAAkB,GAAGH,GAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAjBA;AAmBA,MAAMI,kBAAkB,GAAGH,MAAM,CAACI,GAAV;AAAA;AAAA;AAAA,gIAAxB;;AAQA,MAAMC,QAAQ,GAAG,MAAM;AACrB,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,MAA2BV,QAAQ,CAACI,kBAAD,CAAzC,CADqB,CAC0C;;AAC/D,MAAIM,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP,CAFQ,CAEkB;;AACvC,MAAID,KAAJ,EAAW,oBAAO;AAAA,0BAAWA,KAAK,CAACE,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACX,sBACE;AAAA,2BACE,QAAC,kBAAD;AAAA,gBACGH,IAAI,CAACI,WAAL,CAAiBC,GAAjB,CAAsBC,GAAD,iBACpB,QAAC,OAAD;AAAsB,QAAA,OAAO,EAAEA;AAA/B,SAAcA,GAAG,CAACC,EAAlB;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CAbD;;AAeA,eAAeR,QAAf","sourcesContent":["/* eslint-disable react/jsx-props-no-spreading */\nimport { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport styled from 'styled-components';\nimport Product from './Product';\n\n// QUERY:\n// gql imports graphql-tag that turns our string into a proper graphQL query.\nconst ALL_PRODUCTS_QUERY = gql`\n  query ALL_PRODUCTS_QUERY {\n    allProducts {\n      id\n      title\n      author\n      description\n      price\n      photo {\n        id\n        image {\n          publicUrlTransformed\n        }\n        altText\n      }\n    }\n  }\n`;\n\nconst ProductsListStyles = styled.div`\n  display: grid;\n  grid-gap: 70px;\n  text-align: center;\n  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\n  padding: 100px 12%;\n`;\n\nconst Products = () => {\n  const { data, error, loading } = useQuery(ALL_PRODUCTS_QUERY); // useQuery returns data, errors and if it is currently loading so we destructure it.\n  if (loading) return <p>Loading...</p>; // TODO: Change for loader.\n  if (error) return <p>Error: {error.message}</p>;\n  return (\n    <div>\n      <ProductsListStyles>\n        {data.allProducts.map((elm) => (\n          <Product key={elm.id} product={elm} />\n        ))}\n      </ProductsListStyles>\n    </div>\n  );\n};\n\nexport default Products;\n"]},"metadata":{},"sourceType":"module"}