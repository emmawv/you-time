{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/emmawv/practice/you-time/client/pages/_app.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable react/prop-types */\n\n/* eslint-disable react/jsx-props-no-spreading */\nimport NProgress from 'nprogress';\nimport Router from 'next/router';\nimport Page from '../components/Page'; // import 'nprogress/nprogress.css'; Gives me automatic settings\n\nimport '../components/styles/nprogress.css'; // My own settings as a CSS file.\n// eslint-disable-next-line import/order\n\nimport { ApolloProvider } from '@apollo/client';\nimport withData from '../lib/withData';\nRouter.events.on('routeChangeStart', () => NProgress.start()); // When the routing starts the loader bar at top of page starts.\n\nRouter.events.on('routeChangeComplete', () => NProgress.done());\nRouter.events.on('routeChangeError', () => NProgress.done()); // If routing ends or there is an error it finishes.\n\nconst MyApp = ({\n  Component,\n  pageProps,\n  apollo\n}) => {\n  console.log(apollo);\n  return (\n    /*#__PURE__*/\n    // To take the withData function and create an instance of Apollo to inject into our application we wrap the app in a provider (a component in React that usually lives very high in your application and allows components that are several levels deep to access the data). Anywhere in my app I can access the data from apollo client.\n    _jsxDEV(ApolloProvider, {\n      client: apollo,\n      children: /*#__PURE__*/_jsxDEV(Page, {\n        children: /*#__PURE__*/_jsxDEV(Component, _objectSpread({}, pageProps), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }, this)\n  );\n}; // Tell Next to fetch all the queries in all the children components. If any of the pages have a getInitialProps (they will as this is what with)\n\n\nMyApp.getInitialProps = async function ({\n  Component,\n  ctx\n}) {\n  let pageProps = {};\n\n  if (Component.getInitialProps) {\n    pageProps = await Component.getInitialProps(ctx);\n  }\n};\n\nexport default withData(MyApp); // withData function will send apollo props to MyApp.","map":{"version":3,"sources":["/Users/emmawv/practice/you-time/client/pages/_app.js"],"names":["NProgress","Router","Page","ApolloProvider","withData","events","on","start","done","MyApp","Component","pageProps","apollo","console","log","getInitialProps","ctx"],"mappings":";;;;;;;;;AAAA;;AACA;AACA,OAAOA,SAAP,MAAsB,WAAtB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,IAAP,MAAiB,oBAAjB,C,CAEA;;AACA,OAAO,oCAAP,C,CAA6C;AAC7C;;AACA,SAASC,cAAT,QAA+B,gBAA/B;AACA,OAAOC,QAAP,MAAqB,iBAArB;AAEAH,MAAM,CAACI,MAAP,CAAcC,EAAd,CAAiB,kBAAjB,EAAqC,MAAMN,SAAS,CAACO,KAAV,EAA3C,E,CAA+D;;AAC/DN,MAAM,CAACI,MAAP,CAAcC,EAAd,CAAiB,qBAAjB,EAAwC,MAAMN,SAAS,CAACQ,IAAV,EAA9C;AACAP,MAAM,CAACI,MAAP,CAAcC,EAAd,CAAiB,kBAAjB,EAAqC,MAAMN,SAAS,CAACQ,IAAV,EAA3C,E,CAA8D;;AAE9D,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,SAAb;AAAwBC,EAAAA;AAAxB,CAAD,KAAsC;AAClDC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA;AAAA;AACE;AACA,YAAC,cAAD;AAAgB,MAAA,MAAM,EAAEA,MAAxB;AAAA,6BACE,QAAC,IAAD;AAAA,+BACE,QAAC,SAAD,oBAAeD,SAAf;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAFF;AAQD,CAVD,C,CAYA;;;AACAF,KAAK,CAACM,eAAN,GAAwB,gBAAgB;AAAEL,EAAAA,SAAF;AAAaM,EAAAA;AAAb,CAAhB,EAAoC;AAC1D,MAAIL,SAAS,GAAG,EAAhB;;AACA,MAAID,SAAS,CAACK,eAAd,EAA+B;AAC7BJ,IAAAA,SAAS,GAAG,MAAMD,SAAS,CAACK,eAAV,CAA0BC,GAA1B,CAAlB;AACD;AACF,CALD;;AAOA,eAAeZ,QAAQ,CAACK,KAAD,CAAvB,C,CAAgC","sourcesContent":["/* eslint-disable react/prop-types */\n/* eslint-disable react/jsx-props-no-spreading */\nimport NProgress from 'nprogress';\nimport Router from 'next/router';\nimport Page from '../components/Page';\n\n// import 'nprogress/nprogress.css'; Gives me automatic settings\nimport '../components/styles/nprogress.css'; // My own settings as a CSS file.\n// eslint-disable-next-line import/order\nimport { ApolloProvider } from '@apollo/client';\nimport withData from '../lib/withData';\n\nRouter.events.on('routeChangeStart', () => NProgress.start()); // When the routing starts the loader bar at top of page starts.\nRouter.events.on('routeChangeComplete', () => NProgress.done());\nRouter.events.on('routeChangeError', () => NProgress.done()); // If routing ends or there is an error it finishes.\n\nconst MyApp = ({ Component, pageProps, apollo }) => {\n  console.log(apollo);\n  return (\n    // To take the withData function and create an instance of Apollo to inject into our application we wrap the app in a provider (a component in React that usually lives very high in your application and allows components that are several levels deep to access the data). Anywhere in my app I can access the data from apollo client.\n    <ApolloProvider client={apollo}>\n      <Page>\n        <Component {...pageProps} />\n      </Page>\n    </ApolloProvider>\n  );\n};\n\n// Tell Next to fetch all the queries in all the children components. If any of the pages have a getInitialProps (they will as this is what with)\nMyApp.getInitialProps = async function ({ Component, ctx }) {\n  let pageProps = {};\n  if (Component.getInitialProps) {\n    pageProps = await Component.getInitialProps(ctx);\n  }\n}\n\nexport default withData(MyApp); // withData function will send apollo props to MyApp.\n"]},"metadata":{},"sourceType":"module"}