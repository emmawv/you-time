{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/emmawv/practice/you-time/client/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/emmawv/practice/you-time/client/components/Products.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query ALL_PRODUCTS_QUERY {\\n    allProducts {\\n      id\\n      title\\n      author\\n      description\\n      price\\n      photo {\\n        id\\n        image {\\n          publicUrlTransformed\\n        }\\n        altText\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag'; // QUERY:\n// gql imports graphql-tag that turns our string into a proper graphQL query.\n\nvar ALL_PRODUCTS_QUERY = gql(_templateObject());\n\nvar Products = function Products() {\n  _s();\n\n  var _useQuery = useQuery(ALL_PRODUCTS_QUERY),\n      data = _useQuery.data,\n      error = _useQuery.error,\n      loading = _useQuery.loading; // useQuery returns data, errors and if it is currently loading so we destructure it.\n\n\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 23\n  }, _this); // TODO: Change for loader.\n\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Error: \", error.message]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 21\n  }, _this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: data.all\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Products, \"eE+cqeCo2lkI//dPlCsO1rICVGU=\", false, function () {\n  return [useQuery];\n});\n\n_c = Products;\nexport default Products;\n\nvar _c;\n\n$RefreshReg$(_c, \"Products\");","map":{"version":3,"sources":["/Users/emmawv/practice/you-time/client/components/Products.js"],"names":["useQuery","gql","ALL_PRODUCTS_QUERY","Products","data","error","loading","message","all"],"mappings":";;;;;;;;;;;;;;;;;AAAA,SAASA,QAAT,QAAyB,gBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB,C,CAEA;AACA;;AACA,IAAMC,kBAAkB,GAAGD,GAAH,mBAAxB;;AAmBA,IAAME,QAAQ,GAAG,SAAXA,QAAW,GAAM;AAAA;;AAAA,kBACYH,QAAQ,CAACE,kBAAD,CADpB;AAAA,MACbE,IADa,aACbA,IADa;AAAA,MACPC,KADO,aACPA,KADO;AAAA,MACAC,OADA,aACAA,OADA,EAC0C;;;AAC/D,MAAIA,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP,CAFQ,CAEkB;;AACvC,MAAID,KAAJ,EAAW,oBAAO;AAAA,0BAAWA,KAAK,CAACE,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;AACX,sBACE;AAAA,2BACE;AAAA,gBACGH,IAAI,CAACI;AADR;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,WADF;AAMD,CAVD;;GAAML,Q;UAC6BH,Q;;;KAD7BG,Q;AAYN,eAAeA,QAAf","sourcesContent":["import { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\n\n// QUERY:\n// gql imports graphql-tag that turns our string into a proper graphQL query.\nconst ALL_PRODUCTS_QUERY = gql`\n  query ALL_PRODUCTS_QUERY {\n    allProducts {\n      id\n      title\n      author\n      description\n      price\n      photo {\n        id\n        image {\n          publicUrlTransformed\n        }\n        altText\n      }\n    }\n  }\n`;\n\nconst Products = () => {\n  const { data, error, loading } = useQuery(ALL_PRODUCTS_QUERY); // useQuery returns data, errors and if it is currently loading so we destructure it.\n  if (loading) return <p>Loading...</p>; // TODO: Change for loader.\n  if (error) return <p>Error: {error.message}</p>;\n  return (\n    <div>\n      <div>\n        {data.all}\n      </div>\n    </div>);\n};\n\nexport default Products;\n"]},"metadata":{},"sourceType":"module"}