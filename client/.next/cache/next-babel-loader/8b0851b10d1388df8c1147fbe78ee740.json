{"ast":null,"code":"import _defineProperty from \"/Users/emmawv/practice/you-time/client/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState } from 'react';\n\nvar useForm = function useForm() {\n  _s();\n\n  var initial = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  // Create a state objet for our inputs\n  var _useState = useState(initial),\n      inputs = _useState[0],\n      setInputs = _useState[1];\n\n  var handleChange = function handleChange(e) {\n    setInputs(_objectSpread(_objectSpread({}, inputs), {}, _defineProperty({}, e.target.name, e.target.value)));\n  }; // Return the things we want to surface from tthis custom hook.\n\n\n  return {\n    inputs: inputs,\n    handleChange: handleChange\n  };\n}; // We are creating a custom hook that will allow us to use as many inputs as we want with the same handleChange function.\n\n\n_s(useForm, \"0tjT+aoDVbAe0wsQZsq9AKLCE20=\");\n\nexport default useForm;","map":{"version":3,"sources":["/Users/emmawv/practice/you-time/client/lib/useForm.js"],"names":["useState","useForm","initial","inputs","setInputs","handleChange","e","target","name","value"],"mappings":";;;;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAkB;AAAA;;AAAA,MAAjBC,OAAiB,uEAAP,EAAO;;AAChC;AADgC,kBAEJF,QAAQ,CAACE,OAAD,CAFJ;AAAA,MAEzBC,MAFyB;AAAA,MAEjBC,SAFiB;;AAIhC,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,CAAD,EAAO;AAC1BF,IAAAA,SAAS,iCAAMD,MAAN,2BAAeG,CAAC,CAACC,MAAF,CAASC,IAAxB,EAA+BF,CAAC,CAACC,MAAF,CAASE,KAAxC,GAAT;AACD,GAFD,CAJgC,CAQhC;;;AACA,SAAO;AACLN,IAAAA,MAAM,EAANA,MADK;AAELE,IAAAA,YAAY,EAAZA;AAFK,GAAP;AAID,CAbD,C,CAeA;;;GAfMJ,O;;AAiBN,eAAeA,OAAf","sourcesContent":["import { useState } from 'react';\n\nconst useForm = (initial = {}) => {\n  // Create a state objet for our inputs\n  const [inputs, setInputs] = useState(initial);\n\n  const handleChange = (e) => {\n    setInputs({ ...inputs, [e.target.name]: e.target.value });\n  };\n\n  // Return the things we want to surface from tthis custom hook.\n  return {\n    inputs,\n    handleChange,\n  };\n};\n\n// We are creating a custom hook that will allow us to use as many inputs as we want with the same handleChange function.\n\nexport default useForm;\n"]},"metadata":{},"sourceType":"module"}