{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/emmawv/practice/you-time/client/components/Products.js\";\nimport { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport styled from 'styled-components'; // QUERY:\n// gql imports graphql-tag that turns our string into a proper graphQL query.\n\nconst ALL_PRODUCTS_QUERY = gql`\n  query ALL_PRODUCTS_QUERY {\n    allProducts {\n      id\n      title\n      author\n      description\n      price\n      photo {\n        id\n        image {\n          publicUrlTransformed\n        }\n        altText\n      }\n    }\n  }\n`;\nconst ProductsList = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  grid-gap: 60px;\n  text-align: center;\n`;\nconst ProductCard = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Products = () => {\n  const {\n    data,\n    error,\n    loading\n  } = useQuery(ALL_PRODUCTS_QUERY); // useQuery returns data, errors and if it is currently loading so we destructure it.\n\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 23\n  }, this); // TODO: Change for loader.\n\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Error: \", error.message]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(ProductsList, {\n      children: data.allProducts.map(elm => /*#__PURE__*/_jsxDEV(ProductCard, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: elm.title\n        }, elm.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: elm.photo.image\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\nexport default Products;","map":{"version":3,"sources":["/Users/emmawv/practice/you-time/client/components/Products.js"],"names":["useQuery","gql","styled","ALL_PRODUCTS_QUERY","ProductsList","div","ProductCard","Products","data","error","loading","message","allProducts","map","elm","title","id","photo","image"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,gBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,MAAP,MAAmB,mBAAnB,C,CAEA;AACA;;AACA,MAAMC,kBAAkB,GAAGF,GAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAjBA;AAmBA,MAAMG,YAAY,GAAGF,MAAM,CAACG,GAAI;AAChC;AACA;AACA;AACA;AACA,CALA;AAOA,MAAMC,WAAW,GAAGJ,MAAM,CAACG,GAAI;AAC/B;AACA;AACA,CAHA;;AAKA,MAAME,QAAQ,GAAG,MAAM;AACrB,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,MAA2BV,QAAQ,CAACG,kBAAD,CAAzC,CADqB,CAC0C;;AAC/D,MAAIO,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP,CAFQ,CAEkB;;AACvC,MAAID,KAAJ,EAAW,oBAAO;AAAA,0BAAWA,KAAK,CAACE,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACX,sBACE;AAAA,2BACE,QAAC,YAAD;AAAA,gBACGH,IAAI,CAACI,WAAL,CAAiBC,GAAjB,CAAsBC,GAAD,iBACpB,QAAC,WAAD;AAAA,gCACE;AAAA,oBAAiBA,GAAG,CAACC;AAArB,WAAQD,GAAG,CAACE,EAAZ;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAK,UAAA,GAAG,EAAEF,GAAG,CAACG,KAAJ,CAAUC;AAApB;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CAhBD;;AAkBA,eAAeX,QAAf","sourcesContent":["import { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport styled from 'styled-components';\n\n// QUERY:\n// gql imports graphql-tag that turns our string into a proper graphQL query.\nconst ALL_PRODUCTS_QUERY = gql`\n  query ALL_PRODUCTS_QUERY {\n    allProducts {\n      id\n      title\n      author\n      description\n      price\n      photo {\n        id\n        image {\n          publicUrlTransformed\n        }\n        altText\n      }\n    }\n  }\n`;\n\nconst ProductsList = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  grid-gap: 60px;\n  text-align: center;\n`;\n\nconst ProductCard = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Products = () => {\n  const { data, error, loading } = useQuery(ALL_PRODUCTS_QUERY); // useQuery returns data, errors and if it is currently loading so we destructure it.\n  if (loading) return <p>Loading...</p>; // TODO: Change for loader.\n  if (error) return <p>Error: {error.message}</p>;\n  return (\n    <div>\n      <ProductsList>\n        {data.allProducts.map((elm) => (\n          <ProductCard>\n            <p key={elm.id}>{elm.title}</p>\n            <img src={elm.photo.image} />\n            </ProductCard>\n        ))}\n      </ProductsList>\n    </div>\n  );\n};\n\nexport default Products;\n"]},"metadata":{},"sourceType":"module"}